{"ast":null,"code":"var _jsxFileName = \"D:\\\\githubgoit\\\\goit-react-hw-07-phonebook\\\\src\\\\components\\\\ContactForm\\\\ContactForm.jsx\",\n    _s = $RefreshSig$();\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport toast, { Toaster } from 'react-hot-toast';\nimport PropTypes from 'prop-types';\nimport { useCreateContactMutation } from '../../services/contacts';\nimport { FormContainer, Message, Label, Button } from './ContactForm.styled';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst schema = yup.object().shape({\n  name: yup.string().required(),\n  number: yup.number().required().positive().integer()\n});\nexport default function ContactForm(_ref) {\n  _s();\n\n  let {\n    data\n  } = _ref;\n  const [createContact] = useCreateContactMutation();\n\n  const handleSubmit = (_ref2, _ref3) => {\n    let {\n      name,\n      number\n    } = _ref2;\n    let {\n      resetForm\n    } = _ref3;\n    const contact = {\n      name: name,\n      phone: number\n    };\n\n    if (!data.find(oldContact => oldContact.name.toLowerCase() === contact.name.toLowerCase())) {\n      createContact(contact);\n    } else {\n      toast(`${contact.name} is already in contacts`);\n    }\n\n    resetForm();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Toaster, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n      onSubmit: handleSubmit,\n      initialValues: {\n        name: '',\n        number: ''\n      },\n      validationSchema: schema,\n      children: /*#__PURE__*/_jsxDEV(FormContainer, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"name\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 51,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"text\",\n              name: \"name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"name\",\n              render: message => /*#__PURE__*/_jsxDEV(Message, {\n                children: \"wrong name format! used letters: A-Z, a-z, \\u0410-\\u042F, \\u0430-\\u044F;\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"tel\",\n              children: \"Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              type: \"tel\",\n              name: \"number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"number\",\n              render: message => /*#__PURE__*/_jsxDEV(Message, {\n                children: \"wrong number format! +10000000000\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 69,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            children: \"Add contact\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ContactForm, \"O/9QuVuh2PkoldUFidBAzeQCqYM=\", false, function () {\n  return [useCreateContactMutation];\n});\n\n_c = ContactForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactForm\");","map":{"version":3,"sources":["D:/githubgoit/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["Formik","Form","Field","ErrorMessage","yup","toast","Toaster","PropTypes","useCreateContactMutation","FormContainer","Message","Label","Button","schema","object","shape","name","string","required","number","positive","integer","ContactForm","data","createContact","handleSubmit","resetForm","contact","phone","find","oldContact","toLowerCase","message"],"mappings":"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","sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport toast, { Toaster } from 'react-hot-toast';\r\nimport PropTypes from 'prop-types';\r\nimport { useCreateContactMutation } from '../../services/contacts';\r\nimport {\r\n  FormContainer,\r\n  Message,\r\n  Label,\r\n  Button,\r\n  \r\n} from './ContactForm.styled';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required(),\r\n  number: yup.number().required().positive().integer(),\r\n});\r\n\r\nexport default function ContactForm({ data }) {\r\n  const [createContact] = useCreateContactMutation();\r\n\r\n  const handleSubmit = ({ name, number }, { resetForm }) => {\r\n    const contact = {\r\n      name: name,\r\n      phone: number,\r\n    };\r\n    if (\r\n      !data.find(\r\n        oldContact =>\r\n          oldContact.name.toLowerCase() === contact.name.toLowerCase()\r\n      )\r\n    ) {\r\n      createContact(contact);\r\n    } else {\r\n      toast(`${contact.name} is already in contacts`);\r\n    }\r\n    resetForm();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Toaster />\r\n      <Formik\r\n        onSubmit={handleSubmit}\r\n        initialValues={{ name: '', number: '' }}\r\n        validationSchema={schema}\r\n      >\r\n        <FormContainer>\r\n          <Form autoComplete=\"off\">\r\n            <div>\r\n              <Label htmlFor=\"name\">Name</Label>\r\n              <Field type=\"text\" name=\"name\" />\r\n              <ErrorMessage\r\n                name=\"name\"\r\n                render={message => (\r\n                  <Message>\r\n                    wrong name format!\r\n                    used letters: A-Z, a-z, А-Я, а-я;\r\n                  </Message>\r\n                )}\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"tel\">Number</Label>\r\n              <Field type=\"tel\" name=\"number\" />\r\n              <ErrorMessage\r\n                name=\"number\"\r\n                render={message => (\r\n                  <Message>\r\n                    wrong number format!\r\n                    +10000000000\r\n                  </Message>\r\n                )}\r\n              />\r\n            </div>\r\n            <Button type=\"submit\">Add contact</Button>\r\n          </Form>\r\n        </FormContainer>\r\n      </Formik>\r\n    </div>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}