{"ast":null,"code":"import{Formik,Form,Field,ErrorMessage}from'formik';import*as yup from'yup';import{useSelector,useDispatch}from'react-redux';import{nanoid}from'nanoid';import{addItems,getContacts}from'redux/contactsSlice';import{FormContainer,Label,Message,Button}from'./ContactForm.styled';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var schema=yup.object().shape({name:yup.string().required(),number:yup.number().required().positive().integer()});export default function ContactForm(){var contactsRedux=useSelector(getContacts);var dispatch=useDispatch();var handleSubmit=function handleSubmit(_ref,_ref2){var name=_ref.name,number=_ref.number;var resetForm=_ref2.resetForm;var contact={id:nanoid(),name:name,number:number};if(!contactsRedux.find(function(oldContact){return oldContact.name.toLowerCase()===contact.name.toLowerCase();})){dispatch(addItems(contact));}else{alert(\"\".concat(contact.name,\" is already in contacts\"));}resetForm();};return/*#__PURE__*/_jsx(Formik,{initialValues:{name:'',number:''},onSubmit:handleSubmit,validationSchema:schema,children:/*#__PURE__*/_jsx(FormContainer,{children:/*#__PURE__*/_jsxs(Form,{autoComplete:\"off\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Label,{htmlFor:\"name\",children:\"Name\"}),/*#__PURE__*/_jsx(Field,{type:\"text\",name:\"name\"}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"name\",render:function render(message){return/*#__PURE__*/_jsx(Message,{children:\"Enter name\"});}})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Label,{htmlFor:\"tel\",children:\"Number\"}),/*#__PURE__*/_jsx(Field,{type:\"tel\",name:\"number\"}),/*#__PURE__*/_jsx(ErrorMessage,{name:\"number\",render:function render(message){return/*#__PURE__*/_jsxs(Message,{children:[\"Wrong number format!\",/*#__PURE__*/_jsx(\"br\",{}),\"Use +1000000000;\"]});}})]}),/*#__PURE__*/_jsx(Button,{type:\"submit\",children:\"Add contact\"})]})})});}","map":{"version":3,"sources":["D:/githubgoit/goit-react-hw-07-phonebook/src/components/ContactForm/ContactForm.jsx"],"names":["Formik","Form","Field","ErrorMessage","yup","useSelector","useDispatch","nanoid","addItems","getContacts","FormContainer","Label","Message","Button","schema","object","shape","name","string","required","number","positive","integer","ContactForm","contactsRedux","dispatch","handleSubmit","resetForm","contact","id","find","oldContact","toLowerCase","alert","message"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,IAAjB,CAAuBC,KAAvB,CAA8BC,YAA9B,KAAkD,QAAlD,CACA,MAAO,GAAKC,CAAAA,GAAZ,KAAqB,KAArB,CACA,OAASC,WAAT,CAAsBC,WAAtB,KAAyC,aAAzC,CACA,OAASC,MAAT,KAAuB,QAAvB,CACA,OAASC,QAAT,CAAmBC,WAAnB,KAAsC,qBAAtC,CACA,OACEC,aADF,CAEEC,KAFF,CAGEC,OAHF,CAIEC,MAJF,KAKO,sBALP,C,wFAOA,GAAMC,CAAAA,MAAM,CAAGV,GAAG,CAACW,MAAJ,GAAaC,KAAb,CAAmB,CAChCC,IAAI,CAAEb,GAAG,CAACc,MAAJ,GAAaC,QAAb,EAD0B,CAEhCC,MAAM,CAAEhB,GAAG,CAACgB,MAAJ,GAAaD,QAAb,GAAwBE,QAAxB,GAAmCC,OAAnC,EAFwB,CAAnB,CAAf,CAKA,cAAe,SAASC,CAAAA,WAAT,EAAuB,CACpC,GAAMC,CAAAA,aAAa,CAAGnB,WAAW,CAACI,WAAD,CAAjC,CACA,GAAMgB,CAAAA,QAAQ,CAAGnB,WAAW,EAA5B,CACA,GAAMoB,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,YAAiC,IAA/BT,CAAAA,IAA+B,MAA/BA,IAA+B,CAAzBG,MAAyB,MAAzBA,MAAyB,IAAfO,CAAAA,SAAe,OAAfA,SAAe,CACpD,GAAMC,CAAAA,OAAO,CAAG,CACdC,EAAE,CAAEtB,MAAM,EADI,CAEdU,IAAI,CAAEA,IAFQ,CAGdG,MAAM,CAAEA,MAHM,CAAhB,CAKI,GACF,CAACI,aAAa,CAACM,IAAd,CACC,SAAAC,UAAU,QACRA,CAAAA,UAAU,CAACd,IAAX,CAAgBe,WAAhB,KAAkCJ,OAAO,CAACX,IAAR,CAAae,WAAb,EAD1B,EADX,CADC,CAKF,CACAP,QAAQ,CAACjB,QAAQ,CAACoB,OAAD,CAAT,CAAR,CACD,CAPG,IAOG,CACLK,KAAK,WAAIL,OAAO,CAACX,IAAZ,4BAAL,CACD,CACDU,SAAS,GACV,CAjBD,CAoBA,mBACE,KAAC,MAAD,EACE,aAAa,CAAE,CAAEV,IAAI,CAAE,EAAR,CAAYG,MAAM,CAAE,EAApB,CADjB,CAEE,QAAQ,CAAEM,YAFZ,CAGE,gBAAgB,CAAEZ,MAHpB,uBAKE,KAAC,aAAD,wBACE,MAAC,IAAD,EAAM,YAAY,CAAC,KAAnB,wBACE,oCACE,KAAC,KAAD,EAAO,OAAO,CAAC,MAAf,kBADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,EAFF,cAGE,KAAC,YAAD,EACE,IAAI,CAAC,MADP,CAEE,MAAM,CAAE,gBAAAoB,OAAO,qBACb,KAAC,OAAD,yBADa,EAFjB,EAHF,GADF,cAaE,oCACE,KAAC,KAAD,EAAO,OAAO,CAAC,KAAf,oBADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAC,KAAZ,CAAkB,IAAI,CAAC,QAAvB,EAFF,cAGE,KAAC,YAAD,EACE,IAAI,CAAC,QADP,CAEE,MAAM,CAAE,gBAAAA,OAAO,qBACb,MAAC,OAAD,gDACsB,aADtB,sBADa,EAFjB,EAHF,GAbF,cA0BE,KAAC,MAAD,EAAQ,IAAI,CAAC,QAAb,yBA1BF,GADF,EALF,EADF,CAsCD","sourcesContent":["import { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { nanoid } from 'nanoid';\r\nimport { addItems, getContacts } from 'redux/contactsSlice';\r\nimport {\r\n  FormContainer,\r\n  Label,\r\n  Message,\r\n  Button,\r\n} from './ContactForm.styled';\r\n\r\nconst schema = yup.object().shape({\r\n  name: yup.string().required(),\r\n  number: yup.number().required().positive().integer(),\r\n});\r\n\r\nexport default function ContactForm() {\r\n  const contactsRedux = useSelector(getContacts)\r\n  const dispatch = useDispatch();\r\n  const handleSubmit = ({name, number}, {resetForm}) => {\r\n    const contact = {\r\n      id: nanoid(),\r\n      name: name,\r\n      number: number,\r\n    };\r\n        if (\r\n      !contactsRedux.find(\r\n        oldContact =>\r\n          oldContact.name.toLowerCase() === contact.name.toLowerCase()\r\n      )\r\n    ) {\r\n      dispatch(addItems(contact));\r\n    } else {\r\n      alert(`${contact.name} is already in contacts`);\r\n    }\r\n    resetForm()\r\n  };\r\n\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ name: '', number: '' }}\r\n      onSubmit={handleSubmit}\r\n      validationSchema={schema}\r\n    >\r\n      <FormContainer>\r\n        <Form autoComplete=\"off\">\r\n          <div>\r\n            <Label htmlFor=\"name\">Name</Label>\r\n            <Field type=\"text\" name=\"name\" />\r\n            <ErrorMessage\r\n              name=\"name\"\r\n              render={message => (\r\n                <Message>\r\n                  Enter name  \r\n                </Message>\r\n              )}\r\n            />\r\n          </div>\r\n          <div>\r\n            <Label htmlFor=\"tel\">Number</Label>\r\n            <Field type=\"tel\" name=\"number\" />\r\n            <ErrorMessage\r\n              name=\"number\"\r\n              render={message => (\r\n                <Message>\r\n                  Wrong number format!<br/>\r\n                  Use +1000000000;\r\n                </Message>\r\n              )}\r\n            />\r\n          </div>\r\n          <Button type=\"submit\">Add contact</Button>\r\n        </Form>\r\n      </FormContainer>\r\n    </Formik>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}