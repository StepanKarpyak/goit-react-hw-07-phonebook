{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nconst contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: {\n    items: [],\n    filter: ''\n  },\n  reducers: {\n    addItems: (state, action) => {\n      state.items.push(action.payload);\n    },\n    addFilter: (state, action) => {\n      state.filter = action.payload;\n    },\n    itemsDelete: (state, action) => {\n      state.items = state.items.filter(contact => contact.id !== action.payload);\n    }\n  }\n});\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['items']\n};\nexport const contactsReduser = persistReducer(persistConfig, contactsSlice.reducer);\nexport const {\n  addFilter,\n  addItems,\n  itemsDelete\n} = contactsSlice.actions;\nexport const getFilter = state => state.contacts.filter;\nexport const getContacts = state => state.contacts.items;","map":{"version":3,"sources":["D:/githubgoit/goit-react-hw-07-phonebook/src/redux/contactsSlice.js"],"names":["createSlice","persistReducer","storage","contactsSlice","name","initialState","items","filter","reducers","addItems","state","action","push","payload","addFilter","itemsDelete","contact","id","persistConfig","key","whitelist","contactsReduser","reducer","actions","getFilter","contacts","getContacts"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AAEA,MAAMC,aAAa,GAAGH,WAAW,CAAC;AAChCI,EAAAA,IAAI,EAAE,UAD0B;AAEhCC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAFkB;AAMhCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC3BD,MAAAA,KAAK,CAACJ,KAAN,CAAYM,IAAZ,CAAiBD,MAAM,CAACE,OAAxB;AACD,KAHO;AAIRC,IAAAA,SAAS,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAAmB;AAC5BD,MAAAA,KAAK,CAACH,MAAN,GAAeI,MAAM,CAACE,OAAtB;AACD,KANO;AAORE,IAAAA,WAAW,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;AAC9BD,MAAAA,KAAK,CAACJ,KAAN,GAAcI,KAAK,CAACJ,KAAN,CAAYC,MAAZ,CACZS,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeN,MAAM,CAACE,OADrB,CAAd;AAGD;AAXO;AANsB,CAAD,CAAjC;AAsBA,MAAMK,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBjB,EAAAA,OAFoB;AAGpBkB,EAAAA,SAAS,EAAE,CAAC,OAAD;AAHS,CAAtB;AAMA,OAAO,MAAMC,eAAe,GAAGpB,cAAc,CAC3CiB,aAD2C,EAE3Cf,aAAa,CAACmB,OAF6B,CAAtC;AAKP,OAAO,MAAM;AAAER,EAAAA,SAAF;AAAaL,EAAAA,QAAb;AAAuBM,EAAAA;AAAvB,IAAwCZ,aAAa,CAACoB,OAA5D;AACP,OAAO,MAAMC,SAAS,GAAGd,KAAK,IAAIA,KAAK,CAACe,QAAN,CAAelB,MAA1C;AACP,OAAO,MAAMmB,WAAW,GAAGhB,KAAK,IAAIA,KAAK,CAACe,QAAN,CAAenB,KAA5C","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport { persistReducer } from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n\r\nconst contactsSlice = createSlice({\r\n  name: 'contacts',\r\n  initialState: {\r\n    items: [],\r\n    filter: '',\r\n  },\r\n  reducers: {\r\n    addItems: (state, action) => {\r\n      state.items.push(action.payload);\r\n    },\r\n    addFilter: (state, action) => {\r\n      state.filter = action.payload;\r\n    },\r\n    itemsDelete: (state, action) => {\r\n      state.items = state.items.filter(\r\n        contact => contact.id !== action.payload\r\n      );\r\n    },\r\n    \r\n  },\r\n});\r\n\r\nconst persistConfig = {\r\n  key: 'root',\r\n  storage,\r\n  whitelist: ['items'],\r\n};\r\n\r\nexport const contactsReduser = persistReducer(\r\n  persistConfig,\r\n  contactsSlice.reducer\r\n);\r\n\r\nexport const { addFilter, addItems, itemsDelete  } = contactsSlice.actions;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const getContacts = state => state.contacts.items;\r\n"]},"metadata":{},"sourceType":"module"}